{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/younghokim/Desktop/minigit/client/src/ApolloProvider.js\";\nimport React from 'react';\nimport App from './App';\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createHttpLink } from 'apollo-link-http';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { setContext } from 'apollo-link-context';\nconst httpLink = createHttpLink({\n  uri: ''\n});\nconst client = new ApolloClient({\n  link: httpLink,\n  cache: new InMemoryCache()\n});\nexport default /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 5\n}, this);","map":{"version":3,"sources":["/Users/younghokim/Desktop/minigit/client/src/ApolloProvider.js"],"names":["React","App","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","setContext","httpLink","uri","client","link","cache"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAAQC,aAAR,QAA4B,uBAA5B;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AACA,SAAQC,cAAR,QAA6B,qBAA7B;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AAEA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC5BI,EAAAA,GAAG,EAAE;AADuB,CAAD,CAA/B;AAIA,MAAMC,MAAM,GAAG,IAAIP,YAAJ,CAAiB;AAC5BQ,EAAAA,IAAI,EAAEH,QADsB;AAE5BI,EAAAA,KAAK,EAAE,IAAIR,aAAJ;AAFqB,CAAjB,CAAf;AAKA,4BACI,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEM,MAAxB;AAAA,yBACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADJ","sourcesContent":["import React from 'react';\nimport App from './App';\nimport ApolloClient from 'apollo-client';\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport {createHttpLink} from 'apollo-link-http';\nimport {ApolloProvider} from '@apollo/react-hooks';\nimport {setContext} from 'apollo-link-context';\n\nconst httpLink = createHttpLink({\n    uri: ''\n});\n\nconst client = new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache()\n});\n\nexport default (\n    <ApolloProvider client={client}>\n        <App/>\n    </ApolloProvider>\n);"]},"metadata":{},"sourceType":"module"}